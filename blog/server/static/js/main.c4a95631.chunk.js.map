{"version":3,"sources":["User.jsx","Users.jsx","Blog.jsx","Blogs.jsx","Errormessage.jsx","Logout.jsx","services.js","App.jsx","serviceWorker.js","index.jsx"],"names":["User","_ref","user","react_default","a","createElement","className","Users","users","userList","Object","keys","map","key","src_User","Blog","blog","sender","title","timestamp","toString","text","Blogs","blogs","handleDelete","blogList","values","id","src_Blog","onClick","Errormessage","errorinfo","Logout","handleLogout","checkUsers","fetch","headers","Headers","content-type","catch","err","Promise","reject","code","then","response","ok","json","statusText","login","username","method","body","JSON","stringify","logout","_ref2","checkBlogs","addBlogs","_ref3","addNewUsers","_ref4","newUsers","deleteBlogs","_ref5","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleText","e","setState","target","value","handleTitle","handleNewUser","handleNewRegistration","handleRegistration","console","log","state","res","handleLogin","loginStatus","refresh","handleUser","handleBlogs","handleEnterKey","nativeEvent","keyCode","handleSubmit","refreshWithoutChangeText","bind","assertThisInitialized","_this2","interval","setInterval","_this3","src_Users","src_Blogs","onChange","onKeyPress","disabled","src_Logout","src_Errormessage","ref","myInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4a95631.chunk.js","sourcesContent":["import React from 'react';\n\nconst User = ({ user }) => {\n  return (\n    <div className=\"user\">\n      <span className=\"username\">{user}</span>\n    </div>\n  );\n};\n\nexport default User;\n","import React from 'react';\nimport User from './User';\n\nconst Users = ({ users }) => {\n  const userList = Object.keys(users).map( user => (\n    <li key={user}>\n      <User user={user}/>\n    </li>\n  ) );\n  return (\n    <ul className=\"users\">\n      {userList}\n    </ul>\n  );\n};\n\nexport default Users;\n","import React from 'react';\n\nconst Blog = ({ blog }) => {\n  return (\n    <div className=\"message\">\n      <div className=\"meta-info\">\n        <div className=\"sender-info\">\n          <span className=\"username\">{blog.sender}</span>\n        </div>\n        <div className=\"message-info\">\n          <span className=\"title\">{blog.title}</span>\n          <span className=\"timestamp\">{blog.timestamp.toString()}</span>\n        </div>\n      </div>\n      <div className=\"message-text\">{blog.text}</div>\n    </div>\n  );\n};\n\nexport default Blog;\n","import React from 'react';\nimport Blog from './Blog';\n\nconst Blogs = ({ blogs, handleDelete}) => {\n  const blogList = Object.values(blogs).map( blog => (\n    <li key={blog.id}>\n      <Blog blog={blog} />\n      <button onClick={() => handleDelete(blog.id)}>Delete Blog</button>\n    </li>\n  ));\n  return (\n    <ul className=\"blog\">\n      {blogList}\n    </ul>\n  );\n};\n\nexport default Blogs;\n\n","import React from 'react';\n\nconst Errormessage = ({ errorinfo }) => {\n  return (\n    <div className=\"error\">\n      <p className=\"error-info\">{errorinfo}</p>\n    </div>\n  );\n};\n\nexport default Errormessage;","import React from 'react';\n\nconst Logout = ({handleLogout}) => {\n    return (\n        <div className=\"logout\">\n          <button className=\"logout-button\" onClick={handleLogout}>Logout</button>\n      </div>\n    );\n  };\n  \n  export default Logout;","export const checkUsers = () => {\r\n  return fetch(`/users/`, {\r\n    headers: new Headers({\r\n      'content-type': 'application/json'\r\n    }),\r\n  })\r\n  .catch( err => Promise.reject({ code: 'Connection error', err }) )\r\n  .then( response => {\r\n    if(response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject({ code: 'Wrong users', err: response.statusText });\r\n  })\r\n};\r\n\r\nexport const login = ({username}) => {\r\n  return fetch(`/login/`, {\r\n    method: 'POST',\r\n    headers: new Headers({\r\n      'content-type': 'application/json'\r\n\t\t}),\r\n\t\tbody: JSON.stringify({ username })\r\n  })\r\n  .catch( err => Promise.reject({ code: 'Connection error', err }) )\r\n  .then( response => {\r\n    if(response.ok) {\r\n      return;\r\n    }\r\n    return Promise.reject({ code: 'Not a valid username, please make sure you have registered and you have logout.', err: response.statusText });\r\n  })\r\n};\r\n\r\nexport const logout = ({username}) => {\r\n  return fetch(`/logout/`, {\r\n    method: 'POST',\r\n    headers: new Headers({\r\n      'content-type': 'application/json'\r\n\t\t}),\r\n\t\tbody: JSON.stringify({ username })\r\n  })\r\n  .catch( err => Promise.reject({ code: 'Connection error', err }) )\r\n  .then( response => {\r\n    if(response.ok) {\r\n      return;\r\n    }\r\n    return Promise.reject({ code: 'Error, please try again.', err: response.statusText });\r\n  })\r\n};\r\n\r\nexport const checkBlogs = () => {\r\n  return fetch(`/blogs/`, {\r\n    headers: new Headers({\r\n      'content-type': 'application/json'\r\n\t\t}),\r\n  })\r\n  .catch( err => Promise.reject({ code: 'Connection error.', err }) )\r\n  .then( response => {\r\n    if(response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject({ code: 'Wrong blogs', err: response.statusText });\r\n  })\r\n};\r\n\r\n\r\nexport const addBlogs = ({sender, title, text}) => {\r\n  return fetch(`/blogs/`, {\r\n    method: 'POST',\r\n    headers: new Headers({\r\n      'content-type': 'application/json'\r\n\t\t}),\r\n\t\tbody: JSON.stringify({ sender, title, text })\r\n  })\r\n  .catch( err => Promise.reject({ code: 'Connection error.', err }) )\r\n  .then( response => {\r\n    if(response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject({ code: 'Wrong blogs.', err: response.statusText });\r\n  })\r\n};\r\n\r\nexport const checkDefaultUsers = () => {\r\n  return fetch(`/default-users/`, {\r\n    headers: new Headers({\r\n      'content-type': 'application/json'\r\n    }),\r\n  })\r\n  .catch( err => Promise.reject({ code: 'Connection error.', err }) )\r\n  .then( response => {\r\n    if(response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject({ code: 'Wrong default users.', err: response.statusText });\r\n  })\r\n};\r\n\r\nexport const addNewUsers = ({newUsers}) => {\r\n  return fetch(`/default-users/`, {\r\n    method: 'POST',\r\n    headers: new Headers({\r\n      'content-type': 'application/json'\r\n\t\t}),\r\n\t\tbody: JSON.stringify({newUsers})\r\n  })\r\n  .catch( err => Promise.reject({ code: 'Connection error.', err }) )\r\n  .then( response => {\r\n    if(response.ok) {\r\n      return;\r\n    }\r\n    return Promise.reject({ code: 'This name already registered.', err: response.statusText });\r\n  })\r\n};\r\n\r\n//\r\n\r\nexport const deleteBlogs = ({ id, username}) => {\r\n  return fetch(`/delete-blogs/`, {\r\n    method: 'POST',\r\n    headers: new Headers({\r\n      'content-type': 'application/json'\r\n\t\t}),\r\n\t\tbody: JSON.stringify({ id, username })\r\n  })\r\n  .catch( err => Promise.reject({ code: 'Connection error.', err }) )\r\n  .then( response => {\r\n    if(response.ok) {\r\n      return;\r\n    }\r\n    return Promise.reject({ code: 'You cannot delete this blog, because this blog does not exit or this blog was not post by you.', err: response.statusText });\r\n  })\r\n};\r\n\r\n\r\n","import React, { Component } from 'react';\nimport Users from './Users';\nimport Blogs from './Blogs';\nimport Errormessage from './Errormessage';\nimport Logout from './Logout';\nimport { checkUsers, login, logout, checkBlogs, addBlogs, addNewUsers, deleteBlogs } from './services';\n\nimport './blog.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loginStatus:false,\n      username:'',\n      title:'',\n      text:'',\n      users:  {\n      },\n      newUsers:'',\n      blogs: {\n      },\n      errorinfo:'' \n    };\n    this.handleEnterKey = this.handleEnterKey.bind(this);\n    this.handleBlogs = this.handleBlogs.bind(this);\n    this.handleUser = this.handleUser.bind(this);\n    this.refresh = this.refresh.bind(this);\n  }\n\n  handleText = (e) => {\n    this.setState({\n      text: e.target.value\n    })\n  }\n\n  handleTitle = (e) => {\n    this.setState({\n      title: e.target.value\n    })\n  }\n\n  handleNewUser = (e) => {\n    this.setState({\n      username: e.target.value\n    })\n  }\n\n  handleNewRegistration = (e) => {\n    this.setState({\n      newUsers: e.target.value\n    })\n  }\n\n  handleRegistration = (e) => {\n    console.log(this.state.newUsers);\n    addNewUsers({newUsers: this.state.newUsers})\n    .then(res => {\n      this.setState(\n        {\n          newUsers:''\n        });\n    })\n    .catch(err => {\n      console.log(this.state.errorinfo);\n      this.setState({ newUsers:'', errorinfo: err.code});\n      \n    });\n  }\n\n  handleLogin = (e) => {\n    console.log(this.state.username);\n    login({username: this.state.username})\n    .then(res => {\n      this.setState(\n        {\n          loginStatus: true\n        });\n        console.log(this.state.username);\n        console.log(this.state.loginStatus);\n        this.refresh();\n    })\n    .catch(err => {\n      console.log(this.state.errorinfo);\n      this.setState({ errorinfo: err.code, username:''});\n      \n    });\n  }\n\n  handleLogout = (e) => {\n    logout({username: this.state.username})\n    .then(res => {\n      this.setState(\n        {\n          loginStatus: false,\n          username:''\n        });\n        this.handleUser();\n    })\n    .catch(err => {\n      this.setState({ errorinfo: err.code})\n    });\n    \n  }\n\n  handleDelete = (id) => {\n    console.log(id);\n    deleteBlogs({id:id, username: this.state.username})\n    .then(res => {\n        this.handleBlogs();\n    })\n    .catch(err => {\n      this.setState({ errorinfo: err.code})\n    });\n  }\n\n  handleEnterKey = (e) => {\n    if(e.nativeEvent.keyCode === 13){\n      this.handleSubmit();\n    }\n  }\n\n  handleSubmit = () => {\n    if(this.state.text && this.state.title) {\n      console.log(this.state.text);\n      console.log(this.state.title);\n      addBlogs({ sender: this.state.username, title:this.state.title, text: this.state.text })\n      .catch(err => {\n        this.setState({errorinfo: err.code, title: '', text: ''})\n      });\n    }\n    this.handleBlogs();\n  }\n\n  handleUser = () => {\n    checkUsers()\n    .then(res => {\n      this.setState(\n        {\n          users: res,\n          errorinfo:''\n        })\n    })\n    .catch(err => {\n      this.setState({ errorinfo: err.code})\n    });\n  }\n\n  handleBlogs = () => {\n    checkBlogs()\n    .then(res => {\n      this.setState(\n        {\n          title:'',\n          text:'',\n          blogs: res,\n          errorinfo:''\n        })\n    })\n    .catch(err => {\n      this.setState({ errorinfo: err.code})\n    });\n  }\n\n\trefresh = () => {\n\t\tthis.handleUser();\n\t\tthis.handleBlogs();\n  }\n  \n  refreshWithoutChangeText = () => {\n\t\tcheckUsers()\n    .then(res => {\n      this.setState(\n        {\n          users: res,\n        })\n    })\n    .catch(err => {\n      this.setState({ errorinfo: err.code})\n    });\n\t\tcheckBlogs()\n    .then(res => {\n      this.setState(\n        {\n          blogs: res,\n        })\n    })\n    .catch(err => {\n      this.setState({ errorinfo: err.code})\n    });\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.interval = setInterval(() => this.refreshWithoutChangeText(), 5000);\n\t}\n\n  render() {\n    if(!this.state.loginStatus) {\n        return (\n        <div className=\"chat-app\">\n          <div className=\"display-panel\">\n          <div className=\"frame-work\">Welcome to this public blog! Please sign up and login!</div>\n          <div className=\"input-username\">\n            <span>Please input your username: </span>\n              <input value={this.state.username} onChange={this.handleNewUser.bind(this)} ref={myInput=>this.myInput=myInput}/>\n            <button onClick={this.handleLogin.bind(this)} disabled={!this.state.username}>Login</button>\n          </div>\n          <div className=\"input-registration\">\n            <span>Or free register: </span>\n            <input value={this.state.newUsers} onChange={this.handleNewRegistration.bind(this)}/>\n            <button onClick={this.handleRegistration.bind(this)}>Register</button>\n          </div>   \n          </div>\n          <Errormessage errorinfo={this.state.errorinfo} />\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"chat-app\">\n          <div className=\"display-panel\">\n            <Users users={this.state.users}/>\n            <Blogs blogs={this.state.blogs} handleDelete={this.handleDelete.bind(this)}/>\n          </div>\n          <div className=\"outgoing\">\n            <div>\n              <p>New blog's title:</p>\n              <input className=\"new-title\" value={this.state.title} onChange={this.handleTitle.bind(this)}/>\n            </div>\n            <div className=\"content-text\">\n              <p>New blog's content:</p>\n              <input className=\"new-content\" value={this.state.text} onChange={this.handleText.bind(this)} onKeyPress={this.handleEnterKey}/>\n              <button onClick={this.handleSubmit} disabled={!this.state.text||!this.state.title}>Send</button>\n            </div>\n          </div>\n              <Logout handleLogout={this.handleLogout} />\n          <Errormessage errorinfo={this.state.errorinfo} />\n        </div>\n      );  \n    }\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}